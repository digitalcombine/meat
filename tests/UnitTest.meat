# Unit Test Suit for the Meat Language.
#
# Copyright (c) 2017 Ron R Wills <ron.rwsoft@gmail.com>
#
# This file is part of Meat.
#
# Meat is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Meat is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Meat.  If not, see <http://www.gnu.org/licenses/>.

Library requires: Console

#==============================================================================
# Test.Test Class
#
#  The objects that actually contain and execute the tests. This class should
# not be used directly. It's a utility class for the class Test.Suite.

Object subclass: Test.Test as: {

  property _title
  property _test
  property _passed
  property _failedReason

  class method title: testTitle test: body {
    self newObject
    _title = testTitle
    _test = body
    context return: self
  }

  method initialize {
    super initialize

    # Some sane defaults.
    _passed = [Boolean false]
    _title = ""
    _failedReason = "Unknown reason"
  }

  # Run the test.
  method run {
    Exception try: {
      # Execute the test ContextBlock
      Console write: [["TEST: " + _title] + "... "]
      _test execute
      
    } catch: .error do: {
      # If we got an uncaught exception then it's a fail.
      _failedReason = [.error message]
      _passed = [Boolean false]
    }

    # Display the results.
    _passed isTrue: {
      Console writeLn: "passed"
    } else: {
      Console writeLn: "failed"
      Console writeLn: ["  " + _failedReason]
    }
  }

  method passed {
    context return: _passed
  }

  # Pass and exit the test.
  method pass {
    _passed = [Boolean true]
    _test return
  }

  # Fail and exit the test, setting the reason why.
  method fail: reason {
    _passed = [Boolean false]
    _failReason = reason
    _test return
  }
}

#==============================================================================
# Test.Suite Class
#
#  Test suites contains a number of tests.

Object subclass: Test.Suite as: {

  property _tests
  property _currentTest
  property _title

  class method new {
    self newObject
    context return: self
  }

  # Initialization a new TestSuite object with default values.
  method initialize {
    super initialize

    _tests = [List new]

    self setup
  }

  # Create and add a test to the test suite.
  #
  # title - The title of the test.
  # body  - A block context containing the test. The pass and fail methods
  #         need to be used to indicate success or failure of the test.
  method title: title test: body {
    _tests append: [Test.Test title: title test: body]
  }

  #  To be overridden by a subclass to add tests to the suite using the 
  # title:test: method. This method is messaged during the initializing of a
  # new object.
  method setup {
  }

  method title: value {
    _title = [value asText]
  }

  # Pass and exit the test.
  method pass {
    [_currentTest isNull] isFalse: {
      _currentTest pass
    }
  }

  # Fail and exit the test, setting the reason why.
  method fail: reason {
    [_currentTest isNull] isFalse: {
      _currentTest fail: reason
    }
  }

  # Application entry point.
  method runTests {
    # Execute the tests.
    Console writeLn: ["=" * 79]
    [_title isNull] isFalse: {
      Console writeLn: ["TEST SUITE: " + _title]
    }
    _tests forEach: .test do: {
      _currentTest = .test
      .test run
      _currentTest = null
    }
  }

  # Generate and return an index of the test counts.
  method summary {
    passedCount = 0

    # Tally up all the passed tests.
    _tests forEach: .test do: {
      [.test passed] isTrue: {
        passedCount = [passedCount + 1]
      }
    }

    # Create a index of the test counts
    result = [Index new]
    result set: "tests preformed" to: [_tests size]
    result set: "tests passed" to: passedCount
    result set: "tests failed" to: [[_tests size] - passedCount]
    context return: result
  }
}

#==============================================================================
# Test.Summary Class

Object subclass: Test.Summary as: {

  property testSuites

  class method new {
    self newObject
    context return: self
  }

  method initialize {
    super initialize
    testSuites = [List new]
  }

  method addSuite: suite {
    [suite isType: Test.Suite] isTrue: {
      testSuites append: suite
    } else: {
      Exception throw: "Only a Test.Suite can be added to a Test.Summary"
    }
  }

  method runAndSummarize {
    testsPreformed = 0
    testsPassed = 0
    testsFailed = 0

    testSuites forEach: .suite do: {
      .suite runTests

      results = [.suite summary]
      testsPreformed = [testsPreformed + [results get: "tests preformed"]]
      testsPassed = [testsPassed + [results get: "tests passed"]]
      testsFailed = [testsFailed + [results get: "tests failed"]]
    }

    Console writeLn: ["=" * 79]
    [testsFailed == 0] isTrue: {
      Console write: "All "
      Console write: [testsPreformed asText]
      Console writeLn: " tests passed."
      context return: 0
    } else: {
      Console writeLn: [[testsPreformed asText] + " tests completed"]
      Console writeLn: [[testsPassed asText] + " tests passed"]
      Console writeLn: [[testsFailed asText] + " tests failed"]
      context return: 1
    }
  }
}
