# Sample template of the grinder compiler classes.
#
# Copyright (c) 2017 Ron R Wills <ron.rwsoft@gmail.com>
#
# This file is part of Meat.
#
# Meat is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Meat is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Meat.  If not, see <http://www.gnu.org/licenses/>.
#
# Notes
#   Since we need gitgo to compile this file, the 'ᶲ' character found in all
#  the class names is to prevent collisions with the builtin in classes. Once
#  the cpp file is generated then the ᶲ characters are stripped out.
#   The generate cpp file is still not valid because all the hash values are
#  included in the name hashing...

Library include: {
#include "compiler.h"
}

#==============================================================================
# Grinder.Library Class

Object subClass: Grinder.Libraryᶲ body: {

  property name
  property classes
  property documentation

  constructor {
    return new meat::grinder::Library(klass, properties);
  }

  method initialize {
    super initialize

    classes = [List new]
  }

  class function new: libraryName {
    meat::Reference new_object = CLASS(klass).new_object();

    name = libraryName;
    dynamic_cast<meat::grinder::Library &>
		  (*new_object).register_as(TEXT(name));

    return new_object;
  }

  function addImport: libraryName {
    dynamic_cast<meat::grinder::Library &>
      (*self).add_import(TEXT(libraryName));
    return null;
  }

	function removeImport: libraryName {
	  dynamic_cast<meat::grinder::Library &>
      (*self).remove_import(TEXT(libraryName));
		return null;
	}

	function getImportList {
		return dynamic_cast<meat::grinder::Library &>(*self).get_imports();
	}

  method getName {
    context return: name
  }

  method renameTo: newName {
    Exception throw: "Currently unable to rename libraries."
    name = [newName asText]
  }

  function addClass: theClass {
    dynamic_cast<meat::grinder::Library &>(*self).add_class(theClass);
	  return null;
  }

  method getClass: className {
    classes forEach: .cls do: {
      [className == [.cls getName]] isTrue: {
        context return: .cls
      }
    }
    Exception throw: [[["Class " + name] + " not found in library "] + name]
  }

  method getClassList {
    names = [List new]
    classes forEach: .cls do: {
      names append: [.cls getName]
    }
    context return: names
  }

  method removeClass: className {
    theClass = [self getClass: className]
    classes remove: theClass
  }

  function setApplicationClass: className {
    dynamic_cast<meat::grinder::Library &>
      (*self).set_application(className->to_string());
    return null;
  }

  function compile {
    dynamic_cast<meat::grinder::Library &>(*self).write();
    return null;
  }
}

#==============================================================================
# Grinder.Class Class

Object subClass: Grinder.Classᶲ body: {

  property className
  property superClass
  property objectProperties
  property classProperties
  property objectMethods
  property classMethods
  property constr

  constructor {
    return new meat::grinder::Class(klass, properties);
  }

  method initialize {
    super initialize

    objectProperties = [List new]
    classProperties = [List new]
    objectMethods = [Index new]
    classMethods = [Index new]
  }

  class method subClassFrom: aClass as: name {
    self newObject
    className = name
    superClass = aClass
    context return: self
  }

  method getName {
    context return: className
  }

  method addProperty: propertyName {
    objectProperties push: [propertyName asText]
  }

  method getPropertiesList {
    context return: [objectProperties copy]
  }

  method addClassProperty: propertyName {
    classProperties push: [propertyName asText]
  }

  method getClassPropertiesList {
    context return: [classProperties copy]
  }

  method addMethod: theMethod {
    objectMethods set: [theMethod getName] to: theMethod
  }

  method removeMethod: methodName {
    objectMethods remove: methodName
  }
}

#==============================================================================
# Grinder.Method Class

Object subClass: Grinder.Methodᶲ body: {

  property methodName
  property parameters
  property body
  property documentation

  constructor {
    return new meat::grinder::Method(klass, properties);
  }

  method initialize {
    super initialize
    parameters = [List new]
  }

  class method new: name {
    self newObject
    methodName = [name asText]
    context return: self
  }

  method getName {
    context return: methodName
  }

  method addParameter: name {
    parameters push: [name asText]
  }

  method removeParameter: name {
    parameters remove: [name asText]
  }

  method getParameterList {
    context return: [parameters copy]
  }

  method getBody {
    context return: body
  }

  method setBody: newBody {
    body = [newBody asText]
  }

  function isNative {
    if (dynamic_cast<meat::grinder::Method &>(*self).is_cpp_method())
      return meat::True();
    return meat::False();
  }

	function isNative: value {
	}
}
