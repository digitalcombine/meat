# Sample template of the grinder compiler classes.
#
# Copyright (c) 2017 Ron R Wills <ron.rwsoft@gmail.com>
#
# This file is part of Meat.
#
# Meat is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Meat is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Meat.  If not, see <http://www.gnu.org/licenses/>.
#
# Notes
#   Since we need gitgo to compile this file, the 'ᶲ' character found in all
#  the class names is to prevent collisions with the builtin in classes. Once
#  the cpp file is generated then the ᶲ characters are stripped out.
#   The generate cpp file is still not valid because all the hash values are
#  included in the name hashing...

Library include: {
#include "compiler.h"
}
Library requires: Console

#==============================================================================
# Grinder.SyntaxException Class

Exception subclass: Grinder.SyntaxExceptionᶲ as: {

  function line {
    return new Value((std::int32_t)(cast<grinder::SyntaxException>(self).line()));
  }

  function character {
    return new Value((std::int32_t)(cast<grinder::SyntaxException>(self).character()));
  }

  class method throw {
    Exception throw
  }

  class method throw: message {
    Exception throw: message
  }

  class method throw: message for: ctx {
    Exception throw: message for: ctx
  }
}

#==============================================================================
# Grinder.Library Class

Object subclass: Grinder.Libraryᶲ as: {

  property _name
  property classes
  property applicationClass
  property requiredLibraries
  property cppInclude

  constructor {
    return new meat::grinder::Library(klass, properties);
  }

  method initialize {
    super initialize

    classes = [List new]
    requiredLibraries = [Set new]
  }

  # Create a new Library Object with the given name.
  class function new: libraryName {
    Reference new_object = cast<meat::Class>(self).new_object();

    auto ctx = message(new_object, "initialize", context);
    execute(ctx);

    cast<grinder::Library>(new_object).property(0) = libraryName;
    cast<grinder::Library>(new_object).register_as(cast<Text>(libraryName));

    return new_object;
  }

  method requires: libraryName {
    Library import: libraryName
    requiredLibraries insert: libraryName
  }

  method removeImport: libraryName {
    requiredLibraries remove: libraryName
  }

  method getImportList {
    context return: [requiredLibraries copy]
  }

  # Return the name of the Library.
  method getName {
    context return: _name
  }

  method renameTo: newName {
    Exception throw: 'Currently unable to rename libraries.'
    _name = [newName asText]
  }

  function addClass: theClass {
    meat::cast<meat::grinder::Library>(self).add_class(theClass);
    return null;
  }

  method getClass: className {
    classes forEach: .cls do: {
      [className == [.cls name]] isTrue: {
        context return: .cls
      }
    }
    Exception throw: [[['Class ' + className] + \
                       ' was not found in library '] + _name]
  }

  method getClassList {
    context return: [classes copy]
  }

  # XXX This isn't going to work. We need to unregister the class from the
  #     system as well.
  method removeClass: className {
    theClass = [self getClass: className]
    classes remove: theClass
  }

  method setApplicationClass: theClass {
    applicationClass = theClass
  }

  function compile {
    meat::cast<meat::grinder::Library>(self).write();
    return null;
  }
}

#==============================================================================
# Grinder.Class Class

Object subclass: Grinder.Classᶲ as: {

  property className
  property superClass
  property objectProperties
  property classProperties
  property objectMethods
  property classMethods
  property constr

  constructor {
    return new meat::grinder::Class(klass, properties);
  }

  method initialize {
    super initialize

    objectProperties = [List new]
    classProperties = [List new]

    objectMethods = [Index new]
    classMethods = [Index new]
  }

  class method from: aClass subclass: name {
    self newObject
    className = name
    #[aClass isType: Class] isTrue: {
      superClass = [aClass name]
    #} else: {
    #  superClass = [aClass asText]
    #}
    #Console writeLn: ["[DEBUG] " + superClass]
    context return: self
  }

  method getName {
    context return: className
  }

  method getSuperName {
    context return: superClass
  }

  method addProperty: propertyName {
    objectProperties push: [propertyName asText]
  }

  method getPropertiesList {
    context return: [objectProperties copy]
  }

  method addClassProperty: propertyName {
    classProperties push: [propertyName asText]
  }

  method getClassPropertiesList {
    context return: [classProperties copy]
  }

  function addMethod: theMethod {
    if (theMethod->is_type("Grinder.Method")) {
      cast<grinder::Class>(self).add_method(theMethod);
    } else {
      throw meat::Exception("Attempting to add a non Grinder.Method to a "
                            "Grinder.Class");
    }

    return null;
  }

  method getMethodList {
    context return: [objectMethods copy]
  }

  method removeMethod: methodName {
    objectMethods remove: methodName
  }

  function addClassMethod: theMethod {
    if (theMethod->is_type("Grinder.Method")) {
      cast<grinder::Class>(self).add_class_method(theMethod);
    } else {
      throw meat::Exception("Attempting to add a non Grinder.Method to a "
                            "Grinder.Class");
    }

    return null;
  }

  method getClassMethodList {
    context return: [classMethods copy]
  }

  method removeClassMethod: methodName {
    classMethods remove: methodName
  }
}

#==============================================================================
# Grinder.Method Class

Object subclass: Grinder.Methodᶲ as: {

  property methodName
  property parameters
  property body

  constructor {
    return new meat::grinder::Method(klass, properties);
  }

  method initialize {
    super initialize
    parameters = [List new]
  }

  class method new: name {
    self newObject
    [name isType: List] isTrue: {
      count = 0
      methodName = [List new]
      name forEach: .part do: {
        [[count % 2] == 0] isTrue: {
          methodName push: [.part asText]
        } else: {
          parameters push: [.part asText]
        }
        count = [count + 1]
      }

      # Validate the method name
      [[parameters entries] == 0] isTrue: {
        mName = [methodName get: 1]
        [[mName getCharAt: [mName length]] == ':'] isTrue: {
          Exception throw: [["\":\" at end of method name, " + mName] + \
                            ", without parameters"]
        }
      } else: {
        [[parameters entries] == 1] isTrue: {
          mName = [methodName get: 1]

          # Operators that don't need the : character.
          [mName == '=='] isTrue: { context break }
          [mName == '<>'] isTrue: { context break }
          [mName == '+'] isTrue: { context break }
          [mName == '-'] isTrue: { context break }
          [mName == '*'] isTrue: { context break }
          [mName == '/'] isTrue: { context break }
          [mName == '%'] isTrue: { context break }
          [mName == '^'] isTrue: { context break }
          [mName == '<'] isTrue: { context break }
          [mName == '<='] isTrue: { context break }
          [mName == '>'] isTrue: { context break }
          [mName == '>='] isTrue: { context break }

          # Other names need the : character before the parameter.
          [[mName getCharAt: [mName length]] <> ':'] isTrue: {
            Exception throw: [["Missing \":\" in method name, " + \
                               mName] + ", before a parameter"]
          }
        } else: {
          # Make sure there's a : before each parameter.
          methodName forEach: .part do: {
            [[.part getCharAt: [.part length]] <> ':'] isTrue: {
              Exception throw: [["Missing \":\" in method name, " + \
                                 .part] + ", before a parameter"]
            }
          }
        }
      }
    } else: {
      Exception throw: "Grinder.Method name needs to be in a List"
    }

    methodName = name
    context return: self
  }

  method getName {
    context return: methodName
  }

  method addParameter: name {
    parameters push: [name asText]
  }

  method removeParameter: name {
    parameters remove: [name asText]
  }

  method getParameterList {
    context return: [parameters copy]
  }

  method getBody {
    context return: body
  }

  method setBody: newBody {
    body = [newBody asText]
  }

  function isNative {
    return meat::Boolean(cast<grinder::Method>(self).is_cpp());
  }

  function isNative: value {
    if (meat::Boolean(value))
      cast<grinder::Method>(self).is_cpp(true);
    else if (not meat::Boolean(value))
      cast<grinder::Method>(self).is_cpp(false);
    else
      throw meat::Exception("Grinder.Method isNative value is not a boolean");

    return null;
  }
}
