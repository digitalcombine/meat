# Sample template of the internal builtin classes
#
# Copyright (c) 2017 Ron R Wills <ron.rwsoft@gmail.com>
#
# This file is part of Meat.
#
# Meat is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Meat is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Meat.  If not, see <http://www.gnu.org/licenses/>.
#
# Notes
#   Since we need gitgo to compile this file, the 'ᶲ' character found in all
#  the class names is to prevent collisions with the builtin in classes. Once
#  the cpp file is generated then the ᶲ characters are stripped out.
#   The generate cpp file is still not valid because all the hash values are
#  included in the name hashing...

Library include: {
#include <meat/utilities.h>
#include "meat-internal.h"

#include <algorithm>
#include <cstdlib>
#include <cstring>
#include <sstream>
#include <cmath>

#ifdef TESTING
#include <testing.h>
#endif /* TESTING */

static int arg_count(int count = 0) {
  static int argc = 0;
  if (count > 0) argc = count;
  return argc;
}

static const char **args(const char *argv[] = (const char **)0) {
  static const char **arguments;
  if (argv != (const char **)0) arguments = argv;
  return arguments;
}
}

#==============================================================================
# 3.2 Class Class

Object subclass: Classᶲ as: {

  # 3.2.1
  class function subclass: name as: block {
    if (compiler() != NULL) {
      compiler()->create_class(self, cast<Text>(name),
                               cast<Text>(block), context);
    } else {
      throw Exception("No compiler implementation is loaded");
    }

    return null;
  }

  # 3.2.2
  class function newObject {
    Reference messenger = cast<Context>(context).messenger();

    // Create the new object and call the initialize method.
    Reference new_object = cast<Class>(self).new_object();
    Reference init_ctx = message(new_object, "initialize", context);
    execute(init_ctx);

    // We replace the self object to the new object.
    cast<Context>(messenger).self(new_object);

    return null;
  }

  # 3.2.3
  class function superClass {
    return cast<Class>(self).super();
  }

  # 3.2.4
  class method initialize {
  }

  # 3.2.5
  class function name {
    return new Text(cast<Class>(self).name());
  }

  class method == other {
    context return: [self is: other]
  }

  # 3.1.2
  class method <> other {
    context return: [self isNot: other]
  }

  # 3.1.3
  class function is: other {
    return Boolean(self == other);
  }

  # 3.1.4
  class function isNot: other {
    return Boolean(not (self == other));
  }

  # 3.1.5
  class method isObject {
    context return: [Boolean false]
  }

  # 3.1.6
  class method isClass {
    context return: [Boolean true]
  }

  # 3.1.7
  class method isNull {
    context return: [Boolean false]
  }

  # 3.1.8
  class method type {
    context return: Class
  }

  # 3.1.9
  class method isType: type {
    context return: [Class == type]
  }

  # 3.1.10
  class function weakReference {
    return self.weak();
  }

  # 3.1.11
  class function normalReference {
    return self.normal();
  }

  # 3.1.12
  class function isWeakReference {
    return Boolean(self.is_weak());
  }

  class function forEach: .class do: block {
    cast<Context>(block).messenger(context);

    auto it = Class::begin();
    for (; it != Class::end(); ++it) {
      cast<BlockContext>(block).set_break_trap();
      cast<BlockParameter>(_class).set_parameter(it->second);
      execute(block);

      if (cast<BlockContext>(block).break_called()) break;
      else cast<BlockContext>(block).reset();
    }

    cast<BlockContext>(block).reset();
    return null;
  }
}

#==============================================================================
# 3.1 Object Class
#

Object subclass: Objectᶲ as: {

  constructor {
    return new meat::Object(klass, properties);
  }

  # 3.1.13
  method initialize {
  }

  # 3.1.1
  method == other {
    context return: [self is: other]
  }

  # 3.1.2
  method <> other {
    context return: [self isNot: other]
  }

  # 3.1.3
  function is: other {
    return Boolean(self == other);
  }

  # 3.1.4
  function isNot: other {
    return Boolean(not (self == other));
  }

  # 3.1.5
  method isObject {
    context return: [Boolean true]
  }

  # 3.1.6
  method isClass {
    context return: [Boolean false]
  }

  # 3.1.8
  function type {
    return self->type();
  }

  # 3.1.9
  function isType: type {
    return Boolean(self->is_type(type));
  }

  method isNull {
    context return: [Boolean false]
  }

  # 3.1.10
  function weakReference {
    return self.weak();
  }

  # 3.1.11
  function normalReference {
    return self.normal();
  }

  # 3.1.12
  function isWeakReference {
    return Boolean(self.is_weak());
  }
}

#==============================================================================
# 3.3 Context Class

Objectᶲ subclass: Contextᶲ as: {

  constructor {
    return new meat::Context(klass, properties);
  }

  # 3.3.1
  #class method subclass: name as: def {
  #  Exception throw: "Cannot subclass an internal Context class"
  #}

  # 3.3.2
  class method newObject {
    Exception throw: "Cannot create a new internal Context object" \
      for: [context uplevel]
  }

  # 3.3.3
  function messenger {
    return cast<Context>(self).messenger();
  }

  # 3.3.4
  function localVariables {
    return new meat::Value(cast<Context>(self).locals() - 4);
  }

  # 3.3.5
  function getLocal: index {
    return cast<Context>(self).local(INTEGER(index));
  }

  # 3.3.6
  function setLocal: index to: value {
    cast<Context>(self).local(INTEGER(index)) = value;
    return null;
  }

  # 3.3.7
  function repeat: block {
    cast<Context>(block).messenger(context);

    for (;;) {
      cast<BlockContext>(block).set_break_trap();
      cast<BlockContext>(block).set_continue_trap();
      execute(block);

      if (cast<BlockContext>(block).break_called() or
          cast<Context>(block).is_done())
        break;

      cast<BlockContext>(block).reset();
    }
    cast<BlockContext>(block).reset();

    return null;
  }

  # 3.3.8
  function return {
    cast<Context>(self).finish();
    return null;
  }

  # 3.3.9
  function return: value {
    cast<Context>(self).result(value); // Set the return value
    cast<Context>(self).finish();      // Tell the context it's done.
    return null;
  }

  function returnTo: otherContext {
    cast<Context>(self).messenger(otherContext);
    cast<Context>(self).finish();
    return null;
  }

  # 3.3.10
  method break {
  }

  # 3.3.11
  method continue {
  }
}

#==============================================================================
# 3.4 BlockContext Class

Contextᶲ subclass: BlockContextᶲ as: {

  # 3.4.1
  function execute {
    cast<BlockContext>(self).messenger(context);
    cast<BlockContext>(self).reset();
    execute(self);

    return null;
  }

  # 3.4.2
  function executeOnBreak: breakBlock {
    cast<BlockContext>(self).set_break_trap();
    cast<BlockContext>(self).messenger(context);

    cast<BlockContext>(self).reset();
    execute(self);

    if (cast<BlockContext>(self).break_called()) {
      Reference up_context = message(breakBlock, "execute", context);
      execute(up_context);
    }

    return null;
  }

  # 3.4.3
  function executeOnBreak: breakBlock onContinue: continueBlock {
    cast<BlockContext>(self).set_break_trap();
    cast<BlockContext>(self).set_continue_trap();
    cast<BlockContext>(self).messenger(context);

    cast<BlockContext>(self).reset();
    execute(self);

    if (cast<BlockContext>(self).break_called()) {
      Reference up_context = message(breakBlock, "execute", context);
      execute(up_context);
    } else if (meat::cast<BlockContext>(self).continue_called()) {
      Reference up_context = message(continueBlock, "execute", context);
      execute(up_context);
    }

    return null;
  }

  # 3.4.4
  function executeOnContinue: continueBlock {
    cast<BlockContext>(self).set_continue_trap();
    cast<BlockContext>(self).messenger(context);

    cast<BlockContext>(self).reset();
    execute(self);

    if (cast<BlockContext>(self).continue_called()) {
      Reference up_context = message(continueBlock, "execute", context);
      execute(up_context);
    }

    return null;
  }

  # 3.4.8
  function return {
    // We need to get the actual context to message the return method from.
    Reference origin = cast<BlockContext>(self).origin();
    Reference up_context = message(origin, "return", context);
    execute(up_context);

    cast<Context>(self).finish(); // Tell the context it's done.

    return null;
  }

  # 3.4.9
  function return: value {
    Reference origin = cast<BlockContext>(self).origin();
    Reference up_context = message(origin, "return:", context);
    cast<Context>(up_context).parameter(0, value);
    execute(up_context);

    cast<Context>(self).finish(); // Tell the context it's done.

    return null;
  }

  # 3.4.10
  function continue {
    cast<BlockContext>(self).c_continue();
    if (not meat::cast<meat::BlockContext>(self).continue_trap_set()) {
      Reference init_ctx = cast<BlockContext>(self).origin();
      Reference up_context = message(init_ctx, "continue", context);
      execute(up_context);
    }
    return null;
  }

  # 3.4.11
  function break {
    cast<BlockContext>(self).c_break();
    if (not cast<BlockContext>(self).break_trap_set()) {
      Reference init_ctx = cast<BlockContext>(self).origin();
      Reference up_context = message(init_ctx, "break", context);
      execute(up_context);
    }
    return null;
  }

  function reset {
    cast<BlockContext>(self).reset();
    return null;
  }
}

#==============================================================================
# 3.5 Null Class

Objectᶲ subclass: Nullᶲ as: {

  class property nullObject

  # 3.5.1
  class method newObject {
    Exception throw: "Cannot create a new internal Null object" \
      for: [context messenger]
  }

  # 3.5.2
  class method subclass: name as: block {
    Exception throw: "Cannot subclass an internal Null class" \
      for: [context messenger]
  }

  # 3.5.3
  method object {
    context return: nullObject
  }

  # 3.5.4
  method isNull {
    context return: [Boolean true]
  }
}

#==============================================================================
# 3.6 Exception Class

Objectᶲ subclass: Exceptionᶲ as: {

  property mesg
  property cntxt

  constructor {
    return new meat::Exception(klass, properties);
  }

  # 3.6.1
  class function try: block {
    cast<Context>(block).messenger(context);

    try {
      execute(block);
    } catch (meat::Exception &err) {
      cast<BlockContext>(block).reset();
    } catch (...) {
      cast<BlockContext>(block).reset();
    }

    return null;
  }

  # 3.6.2
  class function try: try_block catch: catch_block {
    try {
      cast<meat::Context>(try_block).messenger(context);
      execute(try_block);
    } catch (std::exception &err) {
      cast<Context>(catch_block).messenger(context);
      execute(catch_block);
      cast<BlockContext>(try_block).reset();
    }

    return null;
  }

  # 3.6.3
  class function try: try_block catch: .error do: catch_block {
    try {
      cast<Context>(try_block).messenger(context);
      execute(try_block);
    } catch (Exception &err) {
      Reference excp = new meat::Exception(err);
      cast<BlockParameter>(_error).set_parameter(excp);
      cast<Context>(catch_block).messenger(context);
      execute(catch_block);
      cast<BlockContext>(try_block).reset();
    }

    return null;
  }

  # 3.6.4
  class function throw {
    Reference ctx = cast<Context>(context).messenger();
    throw Exception(null, ctx);
  }

  # 3.6.5
  class function throw: message {
    Reference ctx = cast<Context>(context).messenger();
    throw Exception(message, ctx);
  }

  # 3.6.6
  class function throwFor: ctx {
    throw Exception(null, ctx);
  }

  # 3.6.7
  class function throw: message for: ctx {
    throw Exception(message, ctx);
  }

  # 3.6.8
  method message {
    context return: mesg
  }

  # 3.6.9
  method context {
    context return: cntxt
  }
}

Objectᶲ subclass: Exception2ᶲ as: {
  class property _exceptionBlock
  class property _exceptionParameter
  class property _returnContext

  property _message
  property _context

  class method try: tryBlock {
    # Save the previous exception block.
    originalExceptionBlock = _exceptionBlock
    originalExceptionParameter = _exceptionParameter
    originalContext = _returnContext

    # Set up our exception block.
    _exceptionBlock = null
    _exceptionParameter = null
    _returnContext = context
    tryBlock execute

    # Restore the previous exception block.
    _returnContext = originalContext
    _exceptionParameter = originalExceptionParameter
    _exceptionBlock = originalExceptionBlock
  }

  class method try: tryBlock catch: exceptionBlock {
    # Save the previous exception block.
    originalExceptionBlock = _exceptionBlock
    originalExceptionParameter = _exceptionParameter
    originalContext = _returnContext

    # Set up our exception block.
    _exceptionBlock = exceptionBlock
    _exceptionParameter = null
    _returnContext = context
    tryBlock execute

    # Restore the previous exception block.
    _returnContext = originalContext
    _exceptionParameter = originalExceptionParameter
    _exceptionBlock = originalExceptionBlock
  }

  class method try: tryBlock catch: .exception do: exceptionBlock {
    # Save the previous exception block.
    originalExceptionBlock = _exceptionBlock
    originalExceptionParameter = _exceptionParameter
    originalContext = _returnContext

    # Set up our exception block.
    _exceptionBlock = exceptionBlock
    _exceptionParameter = .exception
    _returnContext = context
    tryBlock execute

    # Restore the previous exception block.
    _returnContext = originalContext
    _exceptionParameter = originalExceptionParameter
    _exceptionBlock = originalExceptionBlock
  }

  class method throw: message {
    [_exceptionBlock isNull] isFalse: {
      [_exceptionParameter isNull] isFalse: {
        self newObject
        _message = message
        _context = [context messenger]
        _exceptionParameter setValueTo: self
      }

      _exceptionBlock execute
    }

    context returnTo: _returnContext
  }

  class method throw: message for: otherContext {
    [_exceptionBlock isNull] isFalse: {
      [_exceptionParameter isNull] isFalse: {
        self newObject
        _message = message
        _context = otherContext
        _exceptionParameter setValueTo: self
      }

      _exceptionBlock execute
    }

    context returnTo: _returnContext
  }

  method message {
    context return: _message
  }

  method context {
    context return: _context
  }
}

#==============================================================================
# Boolean Class

Objectᶲ subclass: Booleanᶲ as: {

  class property trueObject
  class property falseObject

  class method true {
    context return: trueObject
  }

  class method false {
    context return: falseObject
  }

  function isTrue: block {
    if (self == trueObject) {
      cast<BlockContext>(block).messenger(context);
      execute(block);
    }
    return null;
  }

  function isTrue: trueBlock else: elseBlock {
    if (self == trueObject) {
      cast<BlockContext>(trueBlock).messenger(context);
      execute(trueBlock);
    } else {
      cast<BlockContext>(elseBlock).messenger(context);
      execute(elseBlock);
    }
    return null;
  }

  function isFalse: block {
    if (self == falseObject) {
      cast<BlockContext>(block).messenger(context);
      execute(block);
      cast<BlockContext>(block).reset();
    }
    return null;
  }

  function isFalse: falseBlock else: elseBlock {
    if (self == falseObject) {
      cast<BlockContext>(falseBlock).messenger(context);
      execute(falseBlock);
      cast<BlockContext>(falseBlock).reset();
    } else {
      cast<BlockContext>(elseBlock).messenger(context);
      execute(elseBlock);
      cast<BlockContext>(elseBlock).reset();
    }
    return null;
  }

  method not {
    [self == trueObject] isTrue: {
      context return: falseObject
    } else: {
      context return: trueObject
    }
  }

  function or: other {
    return Boolean((self == trueObject) or (other == trueObject));
  }

  function xor: other {
    return Boolean((self == trueObject) xor (other == trueObject));
  }

  function and: other {
    return Boolean((self == trueObject) and (other == trueObject));
  }

  method asText {
    [self == trueObject] isTrue: {
      context return: "true"
    } else: {
      context return: "false"
    }
  }
}

#==============================================================================
# BlockParameter Class

Objectᶲ subclass: BlockParameterᶲ as: {
  property blockContext
  property localIndex

  constructor {
    return new BlockParameter(klass, properties);
  }

  method setValueTo: value {
    blockContext setLocal: localIndex to: value
  }

  method getValue {
    context return: [blockContext getLocal: localIndex]
  }
}

#==============================================================================
# Numeric

Objectᶲ subclass: Numericᶲ as: {

  class method minValue {
    Exception throw: "Numeric value has no minimum value"
  }

  class method maxValue {
    Exception throw: "Numeric value has no minimum value"
  }

  method + other {
    Exception throw: "Method + undefined"
  }

  method - other {
    Exception throw: "Method - undefined"
  }

  method * other {
    Exception throw: "Method * undefined"
  }

  method / other {
    Exception throw: "Method / undefined"
  }

  method % other {
    Exception throw: "Method % undefined"
  }

  method ^ other {
    Exception throw: "Method ^ undefined"
  }

  method == other {
    Exception throw: "Method == undefined"
  }

  method <> other {
    Exception throw: "Method <> undefined"
  }

  method < other {
    Exception throw: "Method < undefined"
  }

  method <= other {
    Exception throw: "Method <= undefined"
  }

  method > other {
    Exception throw: "Method > undefined"
  }

  method >= other {
    Exception throw: "Method >= undefined"
  }

  method negative {
    Exception throw: "Method negative undefined"
  }

  method absolute {
    Exception throw: "Method absolute undefined"
  }

  method asText {
    Exception throw: "Unable to convert numeric value to Text"
  }
}

#==============================================================================
# Integer Class

Numericᶲ subclass: Integerᶲ as: {

  constructor {
    return new Value(klass, properties);
  }

  class function minValue {
    return new Value(-2147483647-1);
  }

  class function maxValue {
    return new Value(2147483647);
  }

  function + other {
    return new Value(INTEGER(self) + INTEGER(other));
  }

  function - other {
    return new Value(INTEGER(self) - INTEGER(other));
  }

  function * other {
    return new Value(INTEGER(self) * INTEGER(other));
  }

  function / other {
    return new Value(INTEGER(self) / INTEGER(other));
  }

  function % other {
    return new Value(INTEGER(self) % INTEGER(other));
  }

  function ^ other {
    return new Value((double)std::pow(FLOAT(self),
                                      FLOAT(other)));
  }

  function == other {
    try {
      return Boolean(INTEGER(self) == INTEGER(other));
    } catch (...) {}
    return Boolean(false);
  }

  function <> other {
    try {
      return Boolean(INTEGER(self) != INTEGER(other));
    } catch (...) {}
    return Boolean(true);
  }

  function < other {
    try {
      return Boolean(INTEGER(self) < INTEGER(other));
    } catch (...) {}
    return Boolean(true);
  }

  function <= other {
    try {
      return Boolean(INTEGER(self) <= INTEGER(other));
    } catch (...) {}
    return Boolean(true);
  }

  function > other {
    try {
      return Boolean(INTEGER(self) > INTEGER(other));
    } catch (...) {}
    return Boolean(true);
  }

  function >= other {
    try {
      return Boolean(INTEGER(self) >= INTEGER(other));
    } catch (...) {}
    return Boolean(true);
  }

  function negative {
    return new meat::Value(-INTEGER(self));
  }

  function absolute {
    return new Value(std::abs(INTEGER(self)));
  }

  function or: other {
    return new Value(INTEGER(self) | INTEGER(other));
  }

  function and: other {
    return new Value(INTEGER(self) & INTEGER(other));
  }

  function xor: other {
    return new Value(INTEGER(self) ^ INTEGER(other));
  }

  function rshift {
    return new Value(INTEGER(self) >> 1);
  }

  function rshift: amount {
    return new Value(INTEGER(self) >> INTEGER(amount));
  }

  function lshift {
    return new Value(INTEGER(self) << 1);
  }

  function lshift: amount {
    return new Value(INTEGER(self) << INTEGER(amount));
  }

  function timesDo: block {
    std::int32_t limit = INTEGER(self);
    for (std::int_fast32_t c = 0; c < limit; c++) {
      execute(block);
    }
    return null;
  }

  function asText {
    std::stringstream result;
    result << INTEGER(self);
    return new Text(result.str());
  }
}

#==============================================================================
# Number Class

Numericᶲ subclass: Numberᶲ as: {

  constructor {
    return new Value(klass, properties);
  }

  function + other {
    return new Value(FLOAT(self) + FLOAT(other));
  }

  function - other {
    return new Value(FLOAT(self) - FLOAT(other));
  }

  function * other {
    return new Value(FLOAT(self) * FLOAT(other));
  }

  function / other {
    if (FLOAT(other) == 0.0)
      throw Exception("Divide by zero");

    return new Value(FLOAT(self) / FLOAT(other));
  }

  function % other {
    return new Value(std::fmod(FLOAT(self), FLOAT(other)));
  }

  function ^ other {
    return new Value((double)std::pow(FLOAT(self),
                                      FLOAT(other)));
  }

  function == other {
    try {
      return Boolean(FLOAT(self) == FLOAT(other));
    } catch (...) {}
    return Boolean(false);
  }

  function <> other {
    try {
      return Boolean(FLOAT(self) != FLOAT(other));
    } catch (...) {}
    return Boolean(true);
  }

  function < other {
    try {
      return Boolean(FLOAT(self) < FLOAT(other));
    } catch (...) {}
    return Boolean(false);
  }

  function <= other {
    try {
      return Boolean(FLOAT(self) <= FLOAT(other));
    } catch (...) {}
    return Boolean(false);
  }

  function > other {
    try {
      return Boolean(FLOAT(self) > FLOAT(other));
    } catch (...) {}
    return Boolean(false);
  }

  function >= other {
    try {
      return Boolean(FLOAT(self) >= FLOAT(other));
    } catch (...) {}
    return Boolean(false);
  }

  function negative {
    return new Value(-FLOAT(self));
  }

  function absolute {
    return new Value(std::abs(FLOAT(self)));
  }

  function asText {
    std::stringstream result;
    result << (double)FLOAT(self);
    return new Text(result.str());
  }
}

#==============================================================================
# Text Class

Objectᶲ subclass: Textᶲ as: {

  constructor {
    return new Text(klass, properties);
  }

  # 3.11.1
  function isEmpty {
    return Boolean(cast<Text>(self).empty());
  }

  # 3.11.2
  function length {
    std::int32_t length = 0;
    utf8::iterator it(cast<const Text>(self));
    for (; it != it.end(); ++it, ++length);

    return new Value(length);
  }

  # 3.11.3
  function getCharAt: index {
    int i = INTEGER(index);

    if (i <= 0) throw Exception("Text character index out of range");

    utf8::iterator it(cast<const Text>(self));
    for (; it != it.end() and i > 1; ++it, --i);

    if (it == it.end())
      throw Exception("Text character index out of range");

    return new Text(*it);
  }

  # 3.11.4
  function getFrom: start count: end {
    int start_idx = INTEGER(start);
    int end_count = INTEGER(end);

    // Make sure the starting index is in range.
    if (start_idx <= 0)
      throw Exception("Text character index out of range");

    utf8::iterator it(cast<const Text>(self));
    for (; it != it.end() and start_idx > 1; ++it, --start_idx);

    if (it == it.end())
      throw Exception("Text character index out of range");

    utf8::iterator start_it(it);

    for (; it != it.end() and end_count > 0; ++it, --end_count);

    return new Text(utf8::substr(start_it, it));
  }

  # 3.11.5
  function replaceFrom: start count: end with: value {
    int start_idx = INTEGER(start);
    int end_count = INTEGER(end);

    // Make sure the starting index is in range.
    if (start_idx <= 0)
      throw Exception("Text character index out of range");

    utf8::iterator it(cast<const Text>(self));
    for (; it != it.end() and start_idx > 1; ++it, --start_idx);

    if (it == it.end())
      throw Exception("Text character index out of range");

    utf8::iterator start_it(it);

    for (; it != it.end() and end_count > 1; ++it, --end_count);

    return new Text(utf8::replace(start_it, it, cast<Text>(value)));
  }

  # 3.11.6
  function replaceAll: text with: value {
    const std::string &tvalue = cast<const Text>(text);
    const std::string &vvalue = cast<const Text>(value);
    std::string result = cast<Text>(self);

    size_t index = result.find(tvalue);
    while (index != std::string::npos) {
      result.replace(index, tvalue.length(), vvalue);
      index = result.find(tvalue, index + vvalue.length());
    }

    return new Text(result);
  }

  # 3.11.7
  function findFirst: value {
    std::int32_t index = 1;
    utf8::iterator first_char(cast<const Text>(value));
    utf8::iterator it(cast<const Text>(self));

    for (; it != it.end(); ++it, ++index) {
      if ((*it == *first_char) and
          (cast<Text>(self).compare(it.position(),
                                    cast<Text>(value).length(),
                                    cast<Text>(value)) == 0)) {
        return new Value(index);
      }
    }

    return new Value(0);
  }

  # 3.11.8
  function findFirst: value at: index {
    std::int32_t result = 1;
    utf8::iterator first_char(cast<const Text>(value));
    utf8::iterator it(cast<const Text>(self));

    int start_idx = INTEGER(index);

    // Make sure the starting index is in range.
    if (start_idx <= 0)
      throw Exception("Text character index out of range");

    for (; it != it.end() and start_idx > 1; ++it, --start_idx, ++result);

    if (it == it.end())
      throw Exception("Text character index out of range");

    for (; it != it.end(); ++it, ++result) {
      if ((*it == *first_char) and
          (cast<Text>(self).compare(it.position(),
                                    cast<Text>(value).length(),
                                    cast<Text>(value)) == 0)) {
        return new Value(result);
      }
    }

    return new Value(0);
  }

  # 3.11.9
  function findLast: value {
    return null;
  }

  # 3.11.10
  function findLast: value at: index {
    return null;
  }

  # 3.11.11
  function forEach: .character do: block {
    cast<Context>(block).messenger(context);

    utf8::iterator it(cast<const Text>(self));
    for (; it != it.end(); ++it) {
      cast<BlockContext>(block).set_break_trap();
      cast<BlockParameter>(_character).set_parameter(new Text(*it));
      execute(block);

      if (cast<BlockContext>(block).break_called()) break;
      else cast<BlockContext>(block).reset();
    }
    cast<BlockContext>(block).reset();

    return null;
  }

  # 3.11.12
  method asLowercase {
    context return: self
  }

  # 3.11.13
  method asUppercase {
    context return: self
  }

  # 3.11.14
  function copy {
    return new Text(cast<Text>(self));
  }

  # 3.11.15
  function asNumber {
    return null;
  }

  # 3.11.16
  function asInteger {
    return null;
  }

  # 3.11.17
  method asText {
    context return: self
  }

  # 3.11.18
  function == other {
    return Boolean(cast<Text>(self).compare(cast<Text>(other)) == 0);
  }

  # 3.11.19
  function <> other {
    return Boolean(cast<Text>(self).compare(cast<Text>(other)) != 0);
  }

  # 3.11.20
  function < other {
    return Boolean(cast<Text>(self).compare(cast<Text>(other)) < 0);
  }

  # 3.11.21
  function <= other {
    return Boolean(cast<Text>(self).compare(cast<Text>(other)) <= 0);
  }

  # 3.11.22
  function > other {
    return Boolean(cast<Text>(self).compare(cast<Text>(other)) > 0);
  }

  # 3.11.23
  function >= other {
    return Boolean(cast<Text>(self).compare(cast<Text>(other)) >= 0);
  }

  # 3.11.24
  function + other {
    return new Text(cast<Text>(self) + cast<Text>(other));
  }

  # 3.11.25
  function * count {
    std::int32_t cnt_value = INTEGER(count);
    Text *result = new Text();

    for (std::int_fast32_t c = 0; c < cnt_value; ++c)
      (*result) += cast<Text>(self);

    return result;
  }
}

#==============================================================================
# List Class

Objectᶲ subclass: Listᶲ as: {

  constructor {
    return new List(klass, properties);
  }

  # 3.12.1
  class method new {
    self newObject
    context return: self
  }

  # 3.12.2
  function get: index {
    try {
      return cast<List>(self).at(INTEGER(index) - 1);
    } catch (std::out_of_range &err) {
      throw Exception("List index out of Range", context);
    }
  }

  # 3.12.3
  function set: index to: value {
    try {
      cast<List>(self).at(INTEGER(index) - 1) = value;
    } catch (std::out_of_range &err) {
      throw Exception("Index out of Range", context);
    }
    return null;
  }

  # 3.12.4
  function at: index insert: value {
    cast<List>(self).insert(cast<List>(self).begin() + (INTEGER(index) - 1),
                            value);
    return null;
  }

  # 3.12.5
  function remove: value {
    List::iterator it = cast<List>(self).begin();
    while (it != cast<List>(self).end()) {
      if (*it == value)
        cast<List>(self).erase(it);
      it++;
    }
    return null;
  }

  # 3.12.6
  function removeAt: index {
    cast<List>(self).erase(cast<List>(self).begin() + (INTEGER(index) - 1));
    return null;
  }

  # 3.12.7
  function removeFrom: start to: end {
    cast<List>(self).erase(cast<List>(self).begin() + (INTEGER(start) - 1),
                           cast<List>(self).begin() + (INTEGER(end) - 1));
    return null;
  }

  # 3.12.8
  function append: value {
    if (value->is_type(meat::Class::resolve("List"))) {
      cast<List>(self).insert(cast<List>(self).end(),
                              cast<List>(value).begin(),
                              cast<List>(value).end());
    } else {
      cast<List>(self).push_back(value);
    }
    return null;
  }

  # 3.12.9
  function push: value {
    cast<List>(self).push_back(value);
    return null;
  }

  # 3.12.10
  function pushFront: value {
    cast<List>(self).push_front(value);
    return null;
  }

  # 3.12.11
  function pop {
    cast<List>(self).pop_back();
    return null;
  }

  # 3.12.12
  function popFront {
    cast<List>(self).pop_back();
    return null;
  }

  # 3.12.13
  function isEmpty {
    return Boolean(cast<List>(self).empty());
  }

  # 3.12.14
  function swap: first with: second {
    try {
      Reference temp = cast<List>(self).at(INTEGER(first) - 1);
      cast<List>(self).at(INTEGER(first) - 1) =
        cast<List>(self).at(INTEGER(second) - 1);
      cast<List>(self).at(INTEGER(second) - 1) = temp;
    } catch (std::out_of_range &err) {
      throw Exception("Index out of Range", context);
    }
    return null;
  }

  # 3.12.15
  function last {
    return cast<List>(self).back();
  }

  # 3.12.16
  function front {
    return cast<List>(self).front();
  }

  # 3.12.17
  function clear {
    cast<List>(self).clear();
    return null;
  }

  # 3.12.18
  function entries {
    return new Value((int32_t)(cast<List>(self).size()));
  }

  # 3.12.19
  function forEach: .item do: block {
    cast<Context>(block).messenger(context);

    for (auto &item: cast<List>(self)) {
      cast<BlockContext>(block).set_break_trap();
      cast<BlockParameter>(_item).set_parameter(item);
      execute(block);

      if (cast<BlockContext>(block).break_called()) break;
      else cast<BlockContext>(block).reset();
    }

    return null;
  }

  # 3.12.20
  function sort {
    //std::sort(cast<List>(self).begin(), cast<List>(self).end());
    return null;
  }

  # 3.12.21
  function copy {
    Reference new_list = new List(cast<List>(self));
    return new_list;
  }
}

#==============================================================================
# Set Class

Objectᶲ subclass: Setᶲ as: {

  constructor {
    return new Set(klass, properties);
  }

  class method new {
    self newObject
    context return: self
  }

  function remove: value {
    Set::iterator it = cast<Set>(self).begin();
    while (it != cast<Set>(self).end()) {
      if (*it == value)
        cast<Set>(self).erase(it);
      it++;
    }

    return null;
  }

  function insert: value {
    cast<Set>(self).insert(value);
    return null;
  }

  function hasEntry: value {
    return Boolean(cast<Set>(self).find(value) !=
                   cast<Set>(self).end());
  }

  function isEmpty {
    return Boolean(cast<Set>(self).empty());
  }

  function swap: other {
    cast<Set>(self).swap(cast<Set>(other));
    return null;
  }

  function clear {
    cast<Set>(self).clear();
    return null;
  }

  function entries {
    return new Value((std::int32_t)cast<Set>(self).size());
  }

  function forEach: .item do: block {
    cast<Context>(block).messenger(context);

    Set::iterator it = cast<Set>(self).begin();
    for (; it != cast<Set>(self).end(); it++) {
      cast<BlockParameter>(_item).set_parameter(*it);
      execute(block);

      if (cast<BlockContext>(block).break_called() or
          cast<Context>(block).is_done())
        break;

      cast<BlockContext>(block).reset();
    }
    cast<BlockContext>(block).reset();

    return null;
  }

  function copy {
    Reference new_set = new Set(cast<Set>(self));
    return new_set;
  }
}

#==============================================================================
# 3.14 Index Class

Objectᶲ subclass: Indexᶲ as: {

  constructor {
    return new Index(klass, properties);
  }

  class method new {
    self newObject
    context return: self
  }

  # 3.14.1
  function get: key {
    if (cast<Index>(self).find(key) != cast<Index>(self).end())
      return cast<Index>(self)[key];
    throw Exception("Invalid key in index");
  }

  # 3.14.2
  function set: key to: value {
    cast<Index>(self)[key] = value;
    return null;
  }

  # 3.14.3
  function has: key {
    return Boolean(cast<Index>(self).find(key) !=
                   cast<Index>(self).end());
  }

  function remove: key {
    cast<Index>(self).erase(key);
    return null;
  }

  function entries {
    std::int32_t size = cast<Index>(self).size();
    return new Value(size);
  }

  function isEmpty {
    return Boolean(cast<Index>(self).empty());
  }

  function copy {
    Reference new_index = new Index(cast<Index>(self));
    return new_index;
  }
}

#==============================================================================
# Application Class

Objectᶲ subclass: Applicationᶲ as: {

  class function parameters {
    return new meat::Value((std::int32_t)arg_count());
  }

  class function parameter: index {
    std::int32_t idx = INTEGER(index);

    if (idx > arg_count() or idx <= 0)
      throw meat::Exception("Parameter index out of range");

    const char **argv = args();

    return new meat::Text(argv[idx - 1]);
  }

  class function getEnviron: key {
#if defined(_WIN32) || defined(_WIN64)
    LPTSTR value = new TCHAR[4096];
    DWORD result;
    result = GetEnvironmentVariable(meat::cast<meat::Text>(key), value, 4096);
    if (result == 0) {
      delete[] value;
      return new meat::Text("");
    } else {
      meat::Reference retvalue = new meat::meat::cast<meat::Text>(value);
      delete[] value;
      return retvalue;
    }

#elif defined(__linux__) || defined(__FreeBSD__)
    char *value = getenv(meat::cast<meat::Text>(key).c_str());
    if (value != (char *)0)
      return new meat::Text(value);
    else
      return new meat::Text("");
#else
#  error("Don't know how to read the system environment")
#endif
  }

  class method entry {
    Exception throw: "Application class method entry must be overridden"
  }

  method entry {
    Exception throw: "Application method entry must be overridden"
  }
}

#==============================================================================
# 3.15 Archive Class

Objectᶲ subclass: Archiveᶲ as: {

  # 3.15.1
  class function open: filename {
    return new data::Archive(cast<Text>(filename));
  }

  # 3.15.2
  class function create: filename {
    return new data::Archive(cast<Text>(filename), true);
  }

  # 3.15.3
  function requires: libraryName {
    data::Archive &archive_obj = cast<data::Archive>(self);
    data::Library::import(cast<Text>(libraryName).c_str());
    archive_obj.add_import(cast<Text>(libraryName).c_str());
    return null;
  }

  # 3.15.4
  function getObject {
    return cast<data::Archive>(self).get_object();
  }

  # 3.15.5
  function setObject: value {
    cast<data::Archive>(self).set_object(value);
    return null;
  }

  # 3.15.6
  function sync {
    cast<data::Archive>(self).sync();
    return null;
  }
}

#==============================================================================
# Library Class

Objectᶲ subclass: Libraryᶲ as: {
  class property _registry
  class property _paths

  property _name
  property _requirements
  property _classes
  property _symbols

  constructor {
    return new data::Library(klass, properties);
  }

  class method initialize {
    _registry = [Index new]
    _paths = [List new]
  }

  class function import: libraryName {
    auto library = cast<Index>(_registry).find(libraryName);
    if (library != cast<Index>(_registry).end()) {
      return library->second;
    } else {
      // Load the library.
      Reference imported_library = cast<meat::Class>(self).new_object();
      execute(message(imported_library, "initialize", context));

      cast<data::Library>(imported_library).property(0) = libraryName;
      cast<data::Library>(imported_library).import();
      cast<Index>(_registry)[libraryName] = imported_library.weak();

      return imported_library;
    }
  }

  class function requires: libraryName {
    if (compiler() != NULL)
      compiler()->import(cast<Text>(libraryName), context);
    else
      throw Exception("Method \"Library requires:\" compiler not loaded");

    return null;
  }

  class function include: cppIncludes {
    if (compiler() != NULL)
      compiler()->include(cast<Text>(cppIncludes));
    else
      throw Exception("Method Library include: compiler not loaded");

    return null;
  }

  class function setApplicationClass: theClass {
    if (compiler() != NULL)
      compiler()->set_application_class(theClass);
    else
      throw Exception("Method Library setApplicationClass: compiler not loaded");
    return null;
  }

  method initialize {
    _name = ""
    _requirements = [List new]
    _classes = [List new]
    _symbols = [Index new]
  }

  method getName {
    context return: _name
  }

  method getClasses {
    context return: [_classes copy]
  }

  method < other {
    context return: [_name < [other getName]]
  }
}
