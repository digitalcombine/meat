# Text Class and Object Tests
#
# Copyright (c) 2017 Ron R Wills <ron.rwsoft@gmail.com>
#
# This file is part of Meat.
#
# Meat is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Meat is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Meat.  If not, see <http://www.gnu.org/licenses/>.

Library requires: UnitTest

Test.Suite subclass: Test.Text as: {

	method setup {
	  self title: "3.11 The Text Class"
		sample = "Hello World"

    self title: "3.11.1 isEmpty method" test: {
  		["" isEmpty] isFalse: {
  			self fail: "Empty text says it's not empty"
  		}
  		[sample isEmpty] isTrue: {
  			self fail: "Sample text says it's empty when it's not"
  		}
  		self pass
  	}

    self title: "3.11.2 length method" test: {
  		[["" length] == 0] isFalse: {
  			self fail: "Empty text says it's length is > 0"
  		}
  		[[sample length] <> 11] isTrue: {
  			self fail: "Sample text says it's length <> 11"
  		}
  		[["٠١٢٣٤٥٦٧٨٩" length] <> 10] isTrue: {
  			self fail: "Multi character UTF8 sample text says it's length <> 10"
  		}
  		self pass
  	}

  	self title: "3.11.3 getCharAt: method" test: {
			# Zero index should alway raise an Exception.
			caught = [Boolean false]
			Exception try: {
				sample getCharAt: 0
			} catch: {
				caught = [Boolean true]
			}
			caught isFalse: {
				self fail: "Failed to catch an out of range index"
			}

			# Less than zero index should alway raise an Exception.
			caught = [Boolean false]
			Exception try: {
				sample getCharAt: -5
			} catch: {
				caught = [Boolean true]
			}
			caught isFalse: {
				self fail: "Failed to catch an out of range index"
			}

			# Beyond the length of the text should alway raise an Exception.
			caught = [Boolean false]
			Exception try: {
				sample getCharAt: 12
			} catch: {
				caught = [Boolean true]
			}
			caught isFalse: {
				self fail: "Failed to catch an out of range index"
			}

			# The first character should be at index 1.
  	  [[sample getCharAt: 1] == "H"] isFalse: {
  	    self fail: ["getCharAt returned the wrong character H <> " + \
  	                [sample getCharAt: 1]]
  	  }

			# Index sample.
  	  [[sample getCharAt: 5] == "o"] isFalse: {
  	    self fail: ["getCharAt: returned the wrong character o <> " + \
  	                [sample getCharAt: 5]]
  	  }

			# Multibyte unicode index.
  	  [["०१२३४५६७८९" getCharAt: 5] == "४"] isFalse: {
  	    self fail: ["getCharAt: returned the wrong character ४ <> " + \
  	                ["०१२३४५६७८९" getCharAt: 5]]
  	  }
  	  self pass
  	}

		self title: "3.11.4 getFrom:count: method" test: {
			[[sample getFrom: 2 count: 4] == "ello"] isFalse: {
  	    self fail: ["getFrom:count: returned the wrong string ello <> " + \
  	                [sample getFrom: 2 count: 4]]
  	  }
			self pass
		}

		self title: "3.11.5 replaceFrom:count:with: method" test: {
			result = [sample replaceFrom: 6 count: 1 with: " to all the "]
			[result <> "Hello to all the World"] isTrue: {
				self fail: ["Failed to properly replace text: " + result]
			}
			self pass
		}

		self title: "3.11.6 replaceAll:with: method" test: {
			result = [sample replaceAll: "l" with: "qlq"]
			[result <> "Heqlqqlqo Worqlqd"] isTrue: {
				self fail: ["Failed to properly replace text: " + result]
			}
			self pass
		}

  	self title: "3.11.7 findFirst: method" test: {
  	  [[sample findFirst: "hi"] == 0] isFalse: {
  	    self fail: "Test hi wasn't supposed to be found in sample text"
  	  }

  	  index = [sample findFirst: "Hello"]
  	  [index == 1] isFalse: {
  	    self fail: ["Sub text wasn't found in sample text 1 != " + \
  	                [index asText]]
  	  }

  	  index = [sample findFirst: "lo Wor"]
  	  [index == 4] isFalse: {
  	    self fail: ["Sub text wasn't found in sample text 4 != " + \
  	                [index asText]]
  	  }
  	  self pass
  	}

  	self title: "3.11.? forEach:do: method" test: {
  	  result = ""
  	  sample forEach: .character do: {
  	    result = [result + .character]
  	  }
  	  [result == sample] isFalse: {
  	    self fail: ["forEach:do: didn't rebuild sample properly"]
  	  }
  	  self pass
  	}
	}
}
