# Object Class and Object Tests
#
# Copyright (c) 2017 Ron R Wills <ron.rwsoft@gmail.com>
#
# This file is part of Meat.
#
# Meat is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Meat is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Meat.  If not, see <http://www.gnu.org/licenses/>.

Library import: UnitTest

#==============================================================================
# Class BlockTests
#
#  This class contains various block scenarios to be tested.

Object subClass: BlockTests body: {

	class method executeBlock: block {
	  [block isType: BlockContext] isFalse: {
      self fail: "The context is not a BlockContext object."
    }
	  block execute
	}

  class method breakBlock {
	  context return: {
		  context break
			Exception throw: "BlockContext failed to break"
		}
	}

	class method nestedBreakBlock {
    context return: {
      self executeBlock: {
        context break
        Exception throw: "Nested BlockContext failed to break"
      }
			Exception throw: "Nested BlockContext failed to break"
		}
	}

  class method returnBlock {
    self executeBlock: {
      context return
    }

    Exception throw: "Failed to return from BlockContext"
  }

  # Make sure we return as expected in nested block contexts.
  class method returnBlockInBlock {
    self executeBlock: {
      self executeBlock: {
        context return
      }
    }

    Exception throw: "Failed to return in nested BlockContexts"
  }

	class method returnBlockResult {
    self executeBlock: {
      context return: 10
    }

    Exception throw: "Failed to return result from BlockContext"
  }

  # Make sure we return as expected in nested block contexts.
  class method returnBlockInBlockResult {
    self executeBlock: {
      self executeBlock: {
        context return: 10
      }
    }

    Exception throw: "Failed to return result in nested BlockContexts"
  }

}

#==============================================================================
# Class Test.BlockContext

Test.Suite subClass: Test.BlockContext body: {

  method setup {
    other = ""

    self title: "4.4.1 Method execute" test: {
		  BlockTests executeBlock: {
        self pass
		  }
			self fail: "Failed to execute the block"
    }

    self title: "4.4.2 Method executeOnBreak:" test: {
			# Test that we can capture a break event from a block context.
			failed = [Boolean true]
			block = [BlockTests breakBlock]
			block executeOnBreak: {
			  failed = [Boolean false]
			}
			failed isTrue: {
        self fail: "executeOnBreak failed to capture break"
		  }

			# Test that we can capture a break event from a nested block context.
			failed = [Boolean true]
			block = [BlockTests nestedBreakBlock]
			block executeOnBreak: {
			  failed = [Boolean false]
			}
			failed isTrue: {
        self fail: "executeOnBreak failed to capture break"
		  }

			self pass
    }

		self title: "4.4.3 Method executeOnBreak:onContinue:" test: {
			# Test that we can capture a break event from a block context.
			failed = [Boolean true]
			block = [BlockTests breakBlock]
			block executeOnBreak: {
			  failed = [Boolean false]
			}
			failed isTrue: {
        self fail: "executeOnBreak failed to capture break"
		  }

			# Test that we can capture a break event from a nested block context.
			failed = [Boolean true]
			block = [BlockTests nestedBreakBlock]
			block executeOnBreak: {
			  failed = [Boolean false]
			}
			failed isTrue: {
        self fail: "executeOnBreak failed to capture break"
		  }

			self pass
    }

		self title: "4.4.8 Method return" test: {

			BlockTests returnBlock
			BlockTests returnBlockInBlock

		  self pass
		}

    self title: "4.4.9 Method return:" test: {

			[[BlockTests returnBlockResult] == 10] isFalse: {
			  self fail: "BlockContext return: failed to return the expected result"
			}

			[[BlockTests returnBlockInBlockResult] == 10] isFalse: {
			  self fail: "Nested BlockContext return: failed to return the expected result"
			}

		  self pass
		}

		self title: "4.4.10 Method continue" test: {
		  counter = 1
      context repeat: {
        [context isType: BlockContext] isFalse: {
          self fail: "Context is not a BlockContext object."
        }

				[counter == 1] isTrue: {
				  counter = 3
				  context continue
					counter = 2
				}

				[counter == 2] isTrue: {
				  self fail: "BlockContext failed to continue properly"
				}
      }
			self pass
		}

		self title: "4.4.11 Method break" test: {
		  context repeat: {
        [context isType: BlockContext] isFalse: {
          self fail: "Context is not a BlockContext object."
        }

        context break
        self fail: "BlockContext break didn't stop block execution."
      }

			self pass
		}
  }
}
