# Copyright (c) 2017 Ron R Wills <ron.rwsoft@gmail.com>
#
# This file is part of Meat.
#
# Meat is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Meat is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Meat.  If not, see <http://www.gnu.org/licenses/>.

Library include: {
#include <meat/datastore.h>
#include <meat/utilities.h>
}

#==============================================================================
# Library

Object subclass: Libraryᶲ as: {

  class function import: libraryName {
  
#ifdef DEBUG
    std::cout << "DEBUG: Import library " << cast<Text>(libraryName)
              << std::endl;
#endif
  
    data::Library::import(cast<Text>(libraryName));
		return null;
  }

	class function requires: libraryName {
#ifdef DEBUG
		std::cout << "DEBUG: Importing library " << cast<Text>(filename)
  	          << std::endl;
#endif /* DEBUG */

		if (compiler() != NULL)
			compiler()->import(cast<Text>(filename), context);
		else 
		  throw Exception("Method Library requires: compiler not loaded");

		return null;
	}

	class function include: cpp_includes {
		if (compiler() != NULL)
		  compiler()->include(cast<Text>(cpp_includes));
		else
		  throw Exception("Method Library include: compiler not loaded");

		return null;
	}

	class function setApplicationClass: theClass {
	  if (compiler() != NULL)
		  compiler()->set_application_class(theClass);
		else
		  throw Exception("Method Library setApplicationClass: compiler not loaded");
		return null;
	}
}

#==============================================================================
#

Object subclass: Archiveᶲ as: {

  # Only opens an existing archive as readonly.
	class function open: filename {
		return new data::Archive(cast<Text>(filename));
	}

	class function create: filename {
		return new data::Archive(cast<Text>(filename), true);
	}

	function requires: libraryName {
		data::Library::import(cast<Text>(libraryName));
		cast<data::Archive>(self).add_import(cast<Text>(libraryName));
		return null;
	}

	function getObject {
		return cast<data::Archive>(self).get_object();
	}

	function setObject: value {
		cast<data::Archive>(self).set_object(obj);
		return null;
	}

	function sync {
		cast<data::Archive>(self).sync();
		return null;
	}
}
