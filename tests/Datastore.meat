# Copyright (c) 2017 Ron R Wills <ron.rwsoft@gmail.com>
#
# This file is part of Meat.
#
# Meat is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Meat is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Meat.  If not, see <http://www.gnu.org/licenses/>.

Library include: {
#include <meat/datastore.h>
#include <meat/utilities.h>
}

#==============================================================================
# Library

Object subClass: Libraryᶲ as: {

	class function import: filename {
#ifdef DEBUG
		std::cout << "DEBUG: Importing library " << filename->to_string()
  	          << std::endl;
#endif /* DEBUG */

		if (meat::data::compiler_import != 0)
			meat::data::compiler_import(filename->to_string());
		else {
			meat::data::Library::import(filename->to_string());
		}

		return null;
	}

	class function include: cpp_includes {
		if (meat::data::compiler_import != 0)
		  meat::data::Library::include(cpp_includes->to_string());
		else
		  throw Exception("Method Library include is only with the compiler");

		return null;
	}

	class function setApplication: class_name {
		((meat::data::Library &)(*self)).set_application(class_name->to_string());
	}
}

#==============================================================================
#

Object subClass: Archiveᶲ as: {

	class function open: filename {
		return new meat::data::Archive(filename->to_string());
	}

	class function create: filename {
		return new meat::data::Archive(filename->to_string(), true);
	}

	function import: filename {
		meat::data::Archive &archive_obj = (meat::Data::Archive &)(*self);

		meat::data::Library::import(filename->to_string());
		archive_obj.add_import(filename->to_string());

		return null;
	}

	function getObject {
		meat::data::Archive &store_obj = (meat::Data::Archive &)(*self);
		return store_obj.get_object();
	}

	function setObject: value {
		meat::data::Archive &archive_obj = (meat::Data::Archive &)(*self);
		archive_obj.set_object(obj);
		return null;
	}

	function sync {
		((meat::data::Archive &)(*self)).sync();
		return null;
	}
}
